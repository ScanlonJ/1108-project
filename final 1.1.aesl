<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="2" name="RIGHT"/>
<constant value="3" name="LEFT"/>
<constant value="4" name="CHECKPATTERN"/>
<constant value="200" name="TARGET"/>
<constant value="2000" name="THRESHOLD"/>
<constant value="10" name="GROUNDTHRESHOLD"/>
<constant value="850" name="DIVIDERTHRESHOLD"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var targetPattern[3]
var pattern[3]
var timeLimit = 7
var sector[8]
var newSector =  1 # 1 is true, -1 is false
var checkStage = 0  # 0 is not trying to check pattern. 1, 2, 3, and 4 are the stages of checking the pattern
var patternFound = -1  # -1 is false and 1 is true
var locationFound = -1  # -1 is false and 1 is true
# finished: 1. go to the pattern and check what is the pattern; 2.turn right 90 degrees when the robot encounters a corner
#			3. stop when 4 minutes are passed
# unfinished: 1. determine where the robot is; 2. beep when the pattern is found; 3. show where the pattern is using circle LEDs
#			4. return to the finish sector
# more things to add: 1. fault detection and recover from fault
# if change the speed of the robot to 300, then the approximate values for the timers are 615, 615, and 500 if I remember it correctly. The two 615's are for the timer after turnRight and checkStage 4, and the 500 is for the timer in sub checkPattern. However it is more likely for the robot to go wrong (hit wall) if speed is changed greater
# edit by Haoyi Zhang

callsub stop

onevent button.backward
	callsub stop
  
onevent button.forward
	timer.period[1] = 30000
	callsub forward
  
onevent button.right
	callsub capture
	targetPattern = pattern
  
onevent timer1
	if timeLimit > 0 then
		timeLimit = timeLimit - 1
		timer.period[1] = 30000
	else
		callsub stop
	end

onevent timer0
	timer.period[0] = 0
	
	if  state == CHECKPATTERN then
		if checkStage == 1  then
			motor.left.target = -TARGET
			checkStage = 2
		end
		if checkStage == 4 then
			callsub forward
		end
	end
	
	if  state == RIGHT then
		callsub forward
	end
  
onevent prox
	if state != STOPPED then
	
		if  state == FORWARD and prox.horizontal[1] > 2000 and prox.horizontal[3] > 2000 then
			callsub turnRight
		end
		
		# used to determine if the robot enters a new sector
		# could use prox.ground.delta to check the colour of the ground in here
		if  state == FORWARD and prox.ground.delta[0] == DIVIDERTHRESHOLD then
			newSector = 1
		end
		
		# used to determin the black line on the ground to lead the robot to check the patter on the wall
		if  state == FORWARD and (prox.ground.delta[0] &lt; GROUNDTHRESHOLD or prox.ground.delta[1] &lt; GROUNDTHRESHOLD) and newSector == 1 then
			newSector = -1
			callsub checkPattern
		end
		
		# contains different stages that the robot follows in order to get to the patter on the wall and leave from it
		# stage one --> go pass the black line on the ground. Once the timer is activated, then turn to stage two
		# stage two --> turn left to detect the black tape. Once detect the tape, go to stage three
		# stage three --> follows the tape using the right ground sensor. Once the robot is close enough, go to stage four
		# stage four --> turn backward and return to the normal path. state set back to forward
		if  state == CHECKPATTERN and checkStage >= 2 then
			if prox.ground.delta[1] &lt; GROUNDTHRESHOLD and checkStage &lt;= 3 then
				checkStage = 3
				motor.left.target = TARGET
				motor.right.target = TARGET - 100
			end
			
			if prox.ground.delta[1] > GROUNDTHRESHOLD and checkStage == 3 then
				motor.left.target = TARGET - 100
				motor.right.target = TARGET
			end
			
			if (prox.horizontal[0] > 1500 or prox.horizontal[4] > 1500) and checkStage == 3 then
				checkStage = 4
				motor.left.target = 0
				motor.right.target = 0
				callsub capture
			end
			
			if checkStage == 4 then
				motor.left.target = TARGET
				motor.right.target = -TARGET
				timer.period[0] = 960
			end
		end
		
		# used to set the robot back to forward state
		if  state != CHECKPATTERN and state != RIGHT and prox.ground.delta[0] &lt; 900 and prox.ground.delta[1] &lt; 900 and prox.horizontal[2] &lt; 3000 then
			callsub forward
		end
		
		# if the robot found the pattern and it can locate itself and the pattern, then turn to the finish sector
		if patternFound == 1 and locationFound == 1 then
			# the robot should go in to sector 1, 3, 5, or 7 and then call the turnRight function to get into the finish sector
		end
		
	end
	  
sub capture
	pattern = [1,1,1]
	if prox.horizontal[1] > THRESHOLD then pattern[0] = 0 end
	if prox.horizontal[2] > THRESHOLD then pattern[1] = 0 end
	if prox.horizontal[3] > THRESHOLD then pattern[2] = 0 end
	  
	if pattern[0] == 0 then
		if pattern[1] == 0 then
			call leds.top(32,32,32)
		else
			call leds.top(32,0,0)
		end
	else
		if pattern[1] == 0 then
			call leds.top(0,0,32)
		else
			call leds.top(0,32,0)
		end
	end
	
sub stop
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 0
	timer.period[1] = 0
	state = STOPPED
  
sub forward
	motor.left.target = TARGET
	motor.right.target = TARGET
	state = FORWARD
  
sub backward
	motor.left.target = -TARGET
	motor.right.target = -TARGET
  
sub turnRight
	motor.left.target = TARGET
	motor.right.target = -TARGET
	state = RIGHT
	timer.period[0] = 960

sub checkPattern
	motor.left.target = TARGET
	motor.right.target = TARGET
	state = CHECKPATTERN
	checkStage = 1
	timer.period[0] = 1000
	</node>


</network>
